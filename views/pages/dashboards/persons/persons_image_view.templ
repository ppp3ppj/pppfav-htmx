package views_dashboards_persons

import "github.com/ppp3ppj/pppfav-htmx/views/variables"
import "github.com/ppp3ppj/pppfav-htmx/pkg/models"
import "github.com/ppp3ppj/pppfav-htmx/views/pages/dashboards"

type PersonsImageVm struct {
    Opts views_variables.DashboardOpts
    Persons []models.Person
}

templ PersonsImageViewContent(vm PersonsImageVm) {
    @views_dashboard.Dashboard(views_variables.DashboardOpts{
        Nav: vm.Opts.Nav,
        Comp: personsImageViewContent(vm.Persons),
    })
}

templ personsImageViewContent(personList []models.Person) {
	<div class="w-full h-full" id="persons">
		<div class="mx-3 md:mx-10">
			<div class="w-full flex flex-col md:flex-row justify-end">
				<h1 class="grow text-4xl text-secondary font-bold my-auto mt-3 md:mt-0">
					List of Persons
				</h1>
			</div>
			<br/>
			<div class="w-full flex flex-row mb-5 justify-end">
            <div class="">
                Toggle Display
            </div>
                <input type="checkbox" class="toggle toggle-md" checked="checked" />
			</div>
            @personMasonryDisplay(personList, templ.Attributes{})

		</div>
		<br/>
		<div class="h-20"></div>
	</div>
}

templ personMasonryDisplay(persons []models.Person, attrs templ.Attributes) {
   <style>

      *,

      ::before,

      ::after {

        box-sizing: border-box;

      }


      .container {

        counter-reset: box;

        display: grid;

        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));

        grid-auto-rows: 1fr;

        grid-auto-flow: dense;

        grid-gap: 5px;


        height: 100vh;

        margin: 0 auto;

      }


      .box {

        margin: 0;

        display: flex;

        flex-direction: column;

      }


      .box > img {

        flex: 1;

        max-width: 100%;

        object-fit: cover;

      }


      .box > figcaption {

        padding: 0.5rem 1rem;

        background-color: #48cfad;

        color: #fff;

        text-align: center;

      }


      .box:nth-child(2n + 1) {

        grid-row: span 2;

        grid-column: span 2;

      }

    </style>
    <div class="container">
        for _, p := range persons {
            <img class="box rounded" src={ p.ImageURL } alt="Image 03" />
        }
    </div>
}
